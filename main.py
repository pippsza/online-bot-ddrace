

import telebot
import json
import requests
import asyncio
import threading
from telebot import types
from ddapi import DDnetApi


TOKEN = '7794487649:AAErzWjY2HSwoelauu1vstH7MXYzpn_24iQ'


user_prev_online = {}  
user_prev_afk = {}    
user_prev_offline = {}  


USERS_FILE = "users.json"

tracking_tasks = {}


bot = telebot.TeleBot(TOKEN)

waiting_for_friend = set()

global_loop = asyncio.new_event_loop()

def start_loop(loop):
    """–ó–∞–ø—É—Å–∫ asyncio event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    asyncio.set_event_loop(loop)
    loop.run_forever()

asyncio_thread = threading.Thread(target=start_loop, args=(global_loop,), daemon=True)
asyncio_thread.start()


def load_users():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–ø–æ–≤—Ä–µ–∂–¥—ë–Ω.
    """
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_users(users):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
      users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    with open(USERS_FILE, "w", encoding="utf-8") as file:
        json.dump(users, file, indent=4, ensure_ascii=False)

def stop_tracking(user_id):
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞.
    """
    global tracking_tasks
    if user_id in tracking_tasks:
        future = tracking_tasks[user_id]
        future.cancel()  
        del tracking_tasks[user_id]
        print(f"[DEBUG] Tracking for user {user_id} has been cancelled.")


def send_message_chunks(chat_id, blocks, reply_markup):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ ‚Äì —Ü–µ–ª–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∞—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞–Ω–Ω—ã–µ –æ–± –æ–¥–Ω–æ–º –∏–≥—Ä–æ–∫–µ)
    –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ MAX_LENGTH. –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç,
    —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –∞ –±–ª–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    MAX_LENGTH = 4096
    messages = []
    current_message = ""
    for block in blocks:
        if len(current_message) + len(block) > MAX_LENGTH:
            if current_message:
                messages.append(current_message)
                current_message = block
            else:
          
                messages.append(block)
                current_message = ""
        else:
            current_message += block
    if current_message:
        messages.append(current_message)

    for msg in messages:
        try:
            bot.send_message(chat_id, msg, reply_markup=reply_markup)
        except Exception as e:
            print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def fetch_server_info(user_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ DDNET –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è
    –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –î–∞–Ω–Ω—ã–µ –æ–± –æ–Ω–ª–∞–π–Ω, AFK –∏ –æ—Ñ—Ñ–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∞—Ö —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –æ–¥–∏–Ω
    —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ–Ω —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ü–µ–ª—ã–º –±–ª–æ–∫–∞–º (—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    –ø–æ –æ–¥–Ω–æ–º—É –∏–≥—Ä–æ–∫—É –Ω–µ –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏).
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
      user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.
    """
    api = DDnetApi()

    users = load_users()
    current_user = next((user for user in users if user["user_id"] == user_id), None)
    if not current_user or not current_user.get("friends"):
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥—Ä—É–∑—å—è.")
        return

    players_to_find = current_user["friends"]


    if user_id not in user_prev_online:
        user_prev_online[user_id] = set()
    if user_id not in user_prev_afk:
        user_prev_afk[user_id] = set()
    if user_id not in user_prev_offline:
        user_prev_offline[user_id] = set()

    try:
        while True:
            blocks = []  
            changed = False

            try:
                users = load_users()
                current_user = next((user for user in users if user["user_id"] == user_id), None)
                username = current_user.get("name", "Unknown") if current_user else "Unknown"
                print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}): –∑–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ DDNET...")
                server_info = await api.master()

                online_players = set()
                afk_players = set()

                if server_info and hasattr(server_info, 'servers'):
                    for server in server_info.servers:
                        server_name = server.info.name
                        map_name = server.info.map.name
                        game_type = server.info.game_type

                        for client in server.info.clients:
                            player_name = client.name
                            afk_status = client.afk

                            if player_name in players_to_find:
                                if afk_status:
                                    afk_players.add((player_name, game_type, server_name, map_name))
                                else:
                                    online_players.add((player_name, game_type, server_name, map_name))

                online_names = {p[0] for p in online_players}
                afk_names = {p[0] for p in afk_players}
                offline_players = set(friend for friend in players_to_find if friend not in online_names and friend not in afk_names)

                if online_players != user_prev_online[user_id]:
                    changed = True
                    if online_players:
                        blocks.append("üü¢ Online players:\n")
                        for p in online_players:
                            player, game_type, server, map_name = p
      
                            blocks.append("-" * 69 + "\n")
                            blocks.append(f"‚ùáÔ∏è  {player} | {game_type} | {server} | {map_name}  ‚ùáÔ∏è\n")
                        blocks.append("=" * 35 + "\n")

                if afk_players != user_prev_afk[user_id]:
                    changed = True
                    if afk_players:
                        blocks.append("üí§ AFK players:\n")
                        for p in afk_players:
                            player, game_type, server, map_name = p
                            blocks.append("-" * 69 + "\n")
                            blocks.append(f"üò¥  {player} | {game_type} | {server} | {map_name}  üò¥\n")
                        blocks.append("=" * 35 + "\n")

                if offline_players != user_prev_offline[user_id]:
                    changed = True
                    if offline_players:
                        blocks.append("üí¢ Offline players:\n")
                        for friend in offline_players:
                            blocks.append("-" * 69 + "\n")
                            blocks.append(f"‚õî  {friend}  ‚õî\n")
                        blocks.append("=" * 35 + "\n")

                if changed and blocks:
                    user_prev_online[user_id] = online_players.copy()
                    user_prev_afk[user_id] = afk_players.copy()
                    user_prev_offline[user_id] = offline_players.copy()

                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data="cancel"))
                    
                
                    send_message_chunks(user_id, blocks, markup)
                    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä—É–∑–µ–π.")

            except Exception as e:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            await asyncio.sleep(10)
    except asyncio.CancelledError:
        print(f"[DEBUG] –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

@bot.message_handler(commands=['start'])
def privet(message):
    user_id_local = message.from_user.id
    stop_tracking(user_id_local)
    waiting_for_friend.add(user_id_local)
    bot.send_message(
        message.chat.id,
        "‚ù§ Hello. This bot allows you to track your friends' activity on DDNET.\n"
        "To get started, register your nickname ‚Äì just write it in the chat ‚ù§"
    )

@bot.message_handler(func=lambda message: message.from_user.id in waiting_for_friend)
def handle_text(message):
    user_id_local = message.from_user.id
    player_name = message.text.strip()

    if player_name:
        waiting_for_friend.discard(user_id_local)
        keyboard = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton(text="‚úÖ Yes ‚úÖ", callback_data=f"confirm_{player_name}")
        cancel_button = types.InlineKeyboardButton(text="‚ùå Change ‚ùå", callback_data="cancel_name")
        keyboard.add(confirm_button, cancel_button)
        bot.send_message(message.chat.id, f"Is your in-game name correct?: '{player_name}'", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "‚ùå Please enter a valid nickname.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_nick(call):
    parts = call.data.split("_", 1)
    if len(parts) < 2:
        bot.send_message(call.message.chat.id, "‚ùå Incorrect data received.")
        return
    player_name = parts[1]
    global_user = call.from_user.id

    users = load_users()
    existing_user = next((user for user in users if user['user_id'] == global_user), None)

    if not existing_user:
        new_user = {
            'user_id': global_user,
            'name': player_name,
            'friends': []
        }
        users.append(new_user)
        save_users(users)
        bot.send_message(call.message.chat.id, f"You were added to the database, {player_name}!")
    else:
        bot.send_message(call.message.chat.id, f"You are already in the database, {player_name}!")

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üß© Menu üß©")
    bot.send_message(call.message.chat.id, "Thank you for using my bot!", reply_markup=keyboard)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    main_menu(call.message)

@bot.message_handler(func=lambda message: message.text == "üß© Menu üß©")
def menu_handler(message):
    main_menu(message)

def main_menu(context):
    user_id_local = None
    if isinstance(context, types.Message):
        user_id_local = context.from_user.id
    elif isinstance(context, types.CallbackQuery):
        user_id_local = context.from_user.id

    if user_id_local:
        stop_tracking(user_id_local)

    markup = types.InlineKeyboardMarkup()
    button_friends = types.InlineKeyboardButton(text="üë• Friends üë•", callback_data='friend_list')
    button_start_track = types.InlineKeyboardButton(text="üí¢ Start track üí¢", callback_data='start_track')
    button_developers = types.InlineKeyboardButton(text="üíª Developers üíª", callback_data='button_devs')
    markup.row(button_start_track)
    markup.add(button_friends, button_developers)

    if isinstance(context, types.Message):
        bot.send_message(context.chat.id,
                         "üíå Welcome to my bot!\nHere you can track your friends online in DDNET.",
                         reply_markup=markup)
    elif isinstance(context, types.CallbackQuery):
        bot.edit_message_text(chat_id=context.message.chat.id,
                              message_id=context.message.message_id,
                              text="üíå Welcome to my bot!\nHere you can track your friends online in DDNET.",
                              reply_markup=markup)
        bot.answer_callback_query(context.id, "Returning to main menu.")

@bot.callback_query_handler(func=lambda call: call.data == 'start_track')
def start_track(call):
    user_id_local = call.from_user.id
    stop_tracking(user_id_local)
    markup = types.InlineKeyboardMarkup()
    button_cancel = types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data="cancel")
    markup.row(button_cancel)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="Players tracking has started...",
                          reply_markup=markup)
    bot.answer_callback_query(call.id, "Players tracking has started.")
    future = asyncio.run_coroutine_threadsafe(fetch_server_info(user_id_local), global_loop)
    tracking_tasks[user_id_local] = future

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_action(call):
    user_id_local = call.from_user.id
    stop_tracking(user_id_local)
    main_menu(call)

@bot.callback_query_handler(func=lambda call: call.data == 'friend_list')
def friend_list(call):
    markup = types.InlineKeyboardMarkup()
    button_add_friend = types.InlineKeyboardButton(text="üî∏ Add a new friend üî∏", callback_data='add_new_friend')
    button_delete_friend = types.InlineKeyboardButton(text="üîπ Delete some friend üîπ", callback_data='delete_friend')
    button_cancel = types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data='cancel')
    markup.row(button_add_friend)
    markup.add(button_delete_friend)
    markup.add(button_cancel)
    user_id_local = call.from_user.id

    users = load_users()
    current_user = next((user for user in users if user["user_id"] == user_id_local), None)
    friends_string = "No friends yet."
    if current_user and current_user.get("friends"):
        friends_string = ", ".join(current_user["friends"])

    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"Your friends:\n{friends_string}",
                          reply_markup=markup)
    bot.answer_callback_query(call.id, "Here is your friends list.")

@bot.callback_query_handler(func=lambda call: call.data == 'add_new_friend')
def add_new_friend(call):
    user_id_local = call.from_user.id
    waiting_for_friend.add(user_id_local)
    markup = types.InlineKeyboardMarkup()
    button_cancel = types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data='cancel_friend_input')
    markup.row(button_cancel)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="‚úÖ Please write your friend's name in the chat.",
                          reply_markup=markup)
    bot.register_next_step_handler(call.message, process_friend_name)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_friend_input')
def cancel_friend_input(call):
    user_id_local = call.from_user.id
    waiting_for_friend.discard(user_id_local)
    bot.send_message(call.message.chat.id, "‚ùå Friend adding was canceled.")
    main_menu(call.message)

def process_friend_name(message):
    user_id_local = message.from_user.id
    if user_id_local not in waiting_for_friend:
        return
    waiting_for_friend.discard(user_id_local)
    friend_name = message.text.strip()
    users = load_users()
    current_user = next((user for user in users if user["user_id"] == user_id_local), None)
    if current_user:
        if friend_name in current_user.get("friends", []):
            bot.send_message(message.chat.id, f"'{friend_name}' is already in your friends list!")
        else:
            current_user.setdefault("friends", []).append(friend_name)
            save_users(users)
            bot.send_message(message.chat.id, f"‚úÖ Friend '{friend_name}' added successfully!")
    else:
        bot.send_message(message.chat.id, "‚ùå You are not registered yet. Use /start to register.")
    main_menu(message)

@bot.callback_query_handler(func=lambda call: call.data == 'delete_friend')
def delete_friend(call):
    user_id_local = call.from_user.id
    users = load_users()
    current_user = next((user for user in users if user["user_id"] == user_id_local), None)
    if current_user and current_user.get("friends"):
        markup = types.InlineKeyboardMarkup()
        for friend in current_user["friends"]:
            button = types.InlineKeyboardButton(text=friend, callback_data=f"remove_friend_{friend}")
            markup.add(button)
        button_cancel = types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data='cancel')
        markup.add(button_cancel)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="üóë Select a friend to remove:",
                              reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "‚ùå You don't have any friends to remove.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_friend_"))
def remove_friend(call):
    user_id_local = call.from_user.id
    friend_name = call.data.split("remove_friend_")[1]
    users = load_users()
    current_user = next((user for user in users if user["user_id"] == user_id_local), None)
    if current_user and friend_name in current_user.get("friends", []):
        current_user["friends"].remove(friend_name)
        save_users(users)
        bot.send_message(call.message.chat.id, f"‚úÖ Friend '{friend_name}' was removed successfully!")
    else:
        bot.send_message(call.message.chat.id, f"‚ùå Friend '{friend_name}' not found in your list.")
    main_menu(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'button_devs')
def button_devs(call):
    markup = types.InlineKeyboardMarkup()
    button_devs = types.InlineKeyboardButton(text="üíª Devs üíª", callback_data="devs")
    button_designers = types.InlineKeyboardButton(text="üñå Designers üé®", callback_data="designers")
    button_cancel = types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data='cancel')
    markup.row(button_devs, button_designers)
    markup.add(button_cancel)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="üîπ Here you can support developers and designers!\nüîπ Or just ask them something :D",
                          reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'designers')
def artist(call):
    markup = types.InlineKeyboardMarkup()
    button_cancel = types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data='cancel')
    markup.row(button_cancel)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=("""   
Monik will be very happy if you subscribe to his YouTube channel!
He works very hard for his subscribers üòâ
üí† https://youtube.com/@monikddnet?si=p9UebRpPbE1ptVhk üí†
                          """),
                          reply_markup=markup)
    bot.answer_callback_query(call.id, "Subscribe on M√≥nik!")

@bot.callback_query_handler(func=lambda call: call.data == 'devs')
def devs(call):
    markup = types.InlineKeyboardMarkup()
    button_cancel = types.InlineKeyboardButton(text="‚ùå Cancel ‚ùå", callback_data='cancel')
    markup.row(button_cancel)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=("""pippsza will be very happy if you joins his discord or tiktok!
üí†  https://discord.gg/99ChFgBF üí†
üí† https://www.tiktok.com/@pippsza.ddnet?_t=ZM-8t9I3DDMaHN&_r=1 üí†
                          """),
                          reply_markup=markup)
    bot.answer_callback_query(call.id, "Subscribe on pippsza!")

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_name')
def cancel_action(call):
    user_id_local = call.from_user.id
    waiting_for_friend.discard(user_id_local)
    bot.send_message(call.message.chat.id, "Operation was canceled. Please enter your name again!")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    waiting_for_friend.add(user_id_local)
    bot.register_next_step_handler(call.message, handle_text)

def debug_print(message):
    from datetime import datetime
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {message}")

if __name__ == '__main__':
    debug_print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot.polling(none_stop=True)
    except Exception as main_e:
        debug_print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ polling: {main_e}")
