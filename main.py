import telebot
import json
import requests
from telebot import types
# import ddapi

TOKEN = '7794487649:AAErzWjY2HSwoelauu1vstH7MXYzpn_24iQ'
url = 'https://ddnet.org/releases/maps.json'
re = requests.get(url)

USERS_FILE = "users.json"

bot = telebot.TeleBot(TOKEN)

user_id = None
# –î–æ–±–∞–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
waiting_for_friend = set()  # –•—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥—è—Ç –∏–º—è –¥—Ä—É–≥–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞


def load_users():
    try:
        with open(USERS_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    except json.JSONDecodeError:
        return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª


def save_users(users):
    with open(USERS_FILE, "w") as file:
        json.dump(users, file, indent=4)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def privet(message):
    user_id = message.from_user.id
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
    waiting_for_friend.add(user_id)
    bot.send_message(
        message.chat.id, '''
       ‚ù§ Hello. This bot allows you to track your
    friends' activity on DDNET. To get started, register your nickname - just write it in the chat ‚ù§'''
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞


@bot.message_handler(func=lambda message: message.from_user.id in waiting_for_friend)
def handle_text(message):
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    player_name = message.text.strip()  # –ù–∏–∫ –∏–≥—Ä–æ–∫–∞

    if player_name:  # –ï—Å–ª–∏ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
        waiting_for_friend.remove(user_id)  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∫–∞
        keyboard = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton(
            text="‚úÖ Yes ‚úÖ", callback_data=f"confirm_{player_name}")
        cancel_button = types.InlineKeyboardButton(
            text="‚ùå Change ‚ùå", callback_data="cancel_name")
        keyboard.add(confirm_button, cancel_button)

        bot.send_message(
            message.chat.id, f"Is your in-game name correct?: '{player_name}'", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "‚ùå Please enter a valid nickname.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_nick(call):
    player_name = call.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫ –∏–∑ callback_data
    global user_id
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    users = load_users()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = next(
        (user for user in users if user['user_id'] == user_id), None)

    if not existing_user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        new_user = {
            'user_id': user_id,
            'name': player_name,
            'friends': []  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π
        }
        users.append(new_user)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
        bot.send_message(call.message.chat.id,
                         f"You were added to the database, {player_name}!")
    else:
        bot.send_message(call.message.chat.id,
                         f"You are already in the database, {player_name}!")

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üß© Menu üß©")
    bot.send_message(call.message.chat.id,
                     "Thank you for using my bot!", reply_markup=keyboard)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    main_menu(call.message)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


def main_menu(context):
    markup = types.InlineKeyboardMarkup()
    button_friends = types.InlineKeyboardButton(
        text="üë• Friends üë•", callback_data='friend_list')
    button_start_track = types.InlineKeyboardButton(
        text="üí¢ Start track üí¢", callback_data='start_track')
    button_developers = types.InlineKeyboardButton(
        text="üíª Developers üíª", callback_data='button_devs')
    markup.row(button_start_track)
    markup.add(button_friends, button_developers)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (message –∏–ª–∏ call)
    if isinstance(context, types.Message):  # –ï—Å–ª–∏ —ç—Ç–æ message
        bot.send_message(
            context.chat.id,
            text="""üíå Welcome to my bot!
            Here you can track your friends online in DDNET.""",
            reply_markup=markup
        )
    elif isinstance(context, types.CallbackQuery):  # –ï—Å–ª–∏ —ç—Ç–æ call
        bot.edit_message_text(
            chat_id=context.message.chat.id,
            message_id=context.message.message_id,
            text="""üíå Welcome to my bot!
            Here you can track your friends online in DDNET.""",
            reply_markup=markup
        )
        bot.answer_callback_query(context.id, "Returning to main menu.")


@bot.callback_query_handler(func=lambda call: call.data == 'button_devs')
def button_devs(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_devs = telebot.types.InlineKeyboardButton(
        text="üíª Devs üíª", callback_data="devs")
    button_designers = telebot.types.InlineKeyboardButton(
        text="üñå Designers üé®", callback_data="designers")
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùå Cancel ‚ùå", callback_data='cancel')
    markup.row(button_devs, button_designers)
    markup.add(button_cancel)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""  üîπ Here you can support developers and designers! 
         üîπ Or just ask something them :D """,
        reply_markup=markup
    )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤


@bot.callback_query_handler(func=lambda call: call.data == 'start_track')
def start_track(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùåCancel‚ùå", callback_data='cancel')
    markup.row(button_cancel)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""Players tracking has started...""",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "Players tracking has started.")


# –ö–Ω–æ–ø–∫–∞ –¥—Ä—É–∑–µ–π
@bot.callback_query_handler(func=lambda call: call.data == 'friend_list')
def friend_list(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_add_friend = telebot.types.InlineKeyboardButton(
        text="üî∏ Add a new friend üî∏", callback_data='add_new_friend')
    button_delete_friend = telebot.types.InlineKeyboardButton(
        text="üîπ Delete some friend üîπ", callback_data='delete_friend')
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùåCancel‚ùå", callback_data='cancel')
    markup.row(button_add_friend)
    markup.add(button_delete_friend)
    markup.add(button_cancel)
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–Ω–æ–ø–∫—É

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
    users = load_users()

    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user = next(
        (user for user in users if user["user_id"] == user_id), None)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –¥—Ä—É–∑–µ–π
    friends_string = "No friends yet."  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç –¥—Ä—É–∑–µ–π

    if current_user and current_user["friends"]:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –≤ —Å—Ç—Ä–æ–∫—É
        friends_string = ", ".join(current_user["friends"])

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"""Your friends:
         {friends_string}
        """,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "Here is your friends list.")


@bot.callback_query_handler(func=lambda call: call.data == 'add_new_friend')
def add_new_friend(call):
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_friend.add(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥—Ä—É–≥–∞

    markup = types.InlineKeyboardMarkup()
    button_cancel = types.InlineKeyboardButton(
        text="‚ùå Cancel ‚ùå", callback_data='cancel_friend_input')
    markup.row(button_cancel)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚úÖ Please write your friend's name in the chat.",
        reply_markup=markup
    )

    bot.register_next_step_handler(call.message, process_friend_name)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_friend_input')
def cancel_friend_input(call):
    user_id = call.from_user.id
    waiting_for_friend.discard(user_id)  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞
    bot.send_message(call.message.chat.id, "‚ùå Friend adding was canceled.")
    main_menu(call.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥—ã –Ω–∏–∫–∞ –¥—Ä—É–≥–∞


def process_friend_name(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥
    if user_id not in waiting_for_friend:
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥

    waiting_for_friend.discard(user_id)  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö

    friend_name = message.text.strip()  # –ò–º—è –¥—Ä—É–≥–∞, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    users = load_users()
    current_user = next(
        (user for user in users if user["user_id"] == user_id), None)

    if current_user:
        if friend_name in current_user["friends"]:
            bot.send_message(
                message.chat.id, f"'{friend_name}' is already in your friends list!")
        else:
            current_user["friends"].append(friend_name)
            save_users(users)
            bot.send_message(
                message.chat.id, f"‚úÖ Friend '{friend_name}' added successfully!")
    else:
        bot.send_message(
            message.chat.id, "‚ùå You are not registered yet. Use /start to register.")

    main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π


@bot.callback_query_handler(func=lambda call: call.data == 'delete_friend')
def delete_friend(call):
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–Ω–æ–ø–∫—É

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
    users = load_users()

    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user = next(
        (user for user in users if user["user_id"] == user_id), None)

    if current_user and current_user["friends"]:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –¥—Ä—É–∑–µ–π
        markup = types.InlineKeyboardMarkup()
        for friend in current_user["friends"]:
            button = types.InlineKeyboardButton(
                text=friend, callback_data=f"remove_friend_{friend}")
            markup.add(button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        button_cancel = types.InlineKeyboardButton(
            text="‚ùå Cancel ‚ùå", callback_data='cancel')
        markup.add(button_cancel)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üóë Select a friend to remove:",
            reply_markup=markup
        )
    else:
        bot.send_message(call.message.chat.id,
                         "‚ùå You don't have any friends to remove.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è


@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_friend_"))
def remove_friend(call):
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–Ω–æ–ø–∫—É
    friend_name = call.data.split("remove_friend_")[
        1]  # –ò–º—è –¥—Ä—É–≥–∞ –∏–∑ callback_data

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
    users = load_users()

    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user = next(
        (user for user in users if user["user_id"] == user_id), None)

    if current_user and friend_name in current_user["friends"]:
        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        current_user["friends"].remove(friend_name)
        save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON

        bot.send_message(call.message.chat.id, f"‚úÖ Friend '{
                         friend_name}' was removed successfully!")
    else:
        bot.send_message(call.message.chat.id, f"‚ùå Friend '{
                         friend_name}' not found in your list.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu(call.message)


# –ö–Ω–æ–ø–∫–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == 'designers')
def artist(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùåCancel‚ùå", callback_data='cancel')
    markup.row(button_cancel)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""   
       Monik will be very happy if you subscribe to his YouTube channel!
         He tries very hard for his subscribers üòâ
    üí† https://youtube.com/@monikddnet?si=p9UebRpPbE1ptVhk üí†""",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "Subscribe on M√≥nik !")


# –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def return_to_main_menu(call):
    main_menu(call)
# –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤


@bot.callback_query_handler(func=lambda call: call.data == 'devs')
def devs(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùåCancel‚ùå", callback_data='cancel')
    markup.row(button_cancel)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""Pipsha will be very happy if you follow him on TikTok!
    üí† https://www.tiktok.com/@pippsza.ddnet?_t=ZM-8t9I3DDMaHN&_r=1 üí†""",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "Subscribe on1 pippsza!.")
# –û—Ç–º–µ–Ω–∏—Ç—å –∏–º—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_name')
def cancel_action(call):
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    waiting_for_friend.discard(user_id)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∏–º—è –∑–∞–Ω–æ–≤–æ
    bot.send_message(call.message.chat.id,
                     "Operation was canceled. Please enter your name again!")

    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Å–Ω–æ–≤–∞
    waiting_for_friend.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    bot.register_next_step_handler(call.message, handle_text)


if __name__ == '__main__':
    bot.polling(none_stop=True)
