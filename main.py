import telebot
import json
import requests
from telebot import types

TOKEN = '7794487649:AAErzWjY2HSwoelauu1vstH7MXYzpn_24iQ'
url = 'https://ddnet.org/releases/maps.json'
re = requests.get(url)

USERS_FILE = "users.json"

bot = telebot.TeleBot(TOKEN)

user_id = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞


def load_users():
    try:
        with open(USERS_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    except json.JSONDecodeError:
        return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª


def save_users(users):
    with open(USERS_FILE, "w") as file:
        json.dump(users, file, indent=4)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start


@bot.message_handler(commands=['start'])
def privet(message):
    bot.send_message(
        message.chat.id, '''
       ‚ù§ Hello. This bot allows you to track your
    friends' activity on DDNET. To get started, register your nickname - just write it in the chat ‚ù§''')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö


@bot.message_handler(content_types=['text'])
def handle_text(message):
    global user_id
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    player_name = message.text  # –ù–∏–∫ –∏–≥—Ä–æ–∫–∞
    if message.text == 'üß© Menu üß©':
        main_menu(message)
        return
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∫–∞
    keyboard = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton(
        text="‚úÖ Yes ‚úÖ", callback_data=f"confirm_{player_name}")
    cancel_button = types.InlineKeyboardButton(
        text="‚ùå Change ‚ùå", callback_data="cancel_name")
    keyboard.add(confirm_button, cancel_button)

    bot.send_message(
        message.chat.id, f"Is your ingame name correct?: '{player_name}'", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_nick(call):
    player_name = call.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫ –∏–∑ callback_data
    global user_id
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    users = load_users()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = next(
        (user for user in users if user['user_id'] == user_id), None)

    if not existing_user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        new_user = {
            'user_id': user_id,
            'name': player_name,
            'friends': []  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π
        }
        users.append(new_user)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
        bot.send_message(call.message.chat.id,
                         f"You were added to the database, {player_name}!")
    else:
        bot.send_message(call.message.chat.id,
                         f"You are already in the database, {player_name}!")

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üß© Menu üß©")
    bot.send_message(call.message.chat.id,
                     "Thank you for using my bot!", reply_markup=keyboard)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    main_menu(call.message)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


def main_menu(context):
    markup = types.InlineKeyboardMarkup()
    button_friends = types.InlineKeyboardButton(
        text="üë• Friends üë•", callback_data='friend_list')
    button_start_track = types.InlineKeyboardButton(
        text="üí¢ Start track üí¢", callback_data='start_track')
    button_developers = types.InlineKeyboardButton(
        text="üíª Developers üíª", callback_data='button_devs')
    markup.row(button_start_track)
    markup.add(button_friends, button_developers)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (message –∏–ª–∏ call)
    if isinstance(context, types.Message):  # –ï—Å–ª–∏ —ç—Ç–æ message
        bot.send_message(
            context.chat.id,
            text="""üíå Welcome to my bot!
            Here you can track your friends online in DDNET.""",
            reply_markup=markup
        )
    elif isinstance(context, types.CallbackQuery):  # –ï—Å–ª–∏ —ç—Ç–æ call
        bot.edit_message_text(
            chat_id=context.message.chat.id,
            message_id=context.message.message_id,
            text="""üíå Welcome to my bot!
            Here you can track your friends online in DDNET.""",
            reply_markup=markup
        )
        bot.answer_callback_query(context.id, "Returning to main menu.")


@bot.callback_query_handler(func=lambda call: call.data == 'button_devs')
def button_devs(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_devs = telebot.types.InlineKeyboardButton(
        text="üíª Devs üíª", callback_data="devs")
    button_designers = telebot.types.InlineKeyboardButton(
        text="üñå Designers üé®", callback_data="designers")
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùå Cancel ‚ùå", callback_data='cancel')
    markup.row(button_devs, button_designers)
    markup.add(button_cancel)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""  üîπ Here you can support developers and designers! 
         üîπ Or just ask something them :D """,
        reply_markup=markup
    )
# –ö–Ω–æ–ø–∫–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤


@bot.callback_query_handler(func=lambda call: call.data == 'designers')
def artist(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùåCancel‚ùå", callback_data='cancel')
    markup.row(button_cancel)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""   
       Monik will be very happy if you subscribe to his YouTube channel!
         He tries very hard for his subscribers üòâ
    üí† https://youtube.com/@monikddnet?si=p9UebRpPbE1ptVhk üí†""",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "Subscribe on M√≥nik !")


# –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def return_to_main_menu(call):
    main_menu(call)
# –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤


@bot.callback_query_handler(func=lambda call: call.data == 'devs')
def devs(call):
    markup = telebot.types.InlineKeyboardMarkup()
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚ùåCancel‚ùå", callback_data='cancel')
    markup.row(button_cancel)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""Pipsha will be very happy if you follow him on TikTok!
    üí† https://www.tiktok.com/@pippsza.ddnet?_t=ZM-8t9I3DDMaHN&_r=1 üí†""",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "Subscribe on1 pippsza!.")
# –û—Ç–º–µ–Ω–∏—Ç—å –∏–º—è


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_name')
def cancel_action(call):
    bot.send_message(call.message.chat.id,
                     "Operation was canceled. Please enter your name again!")
    bot.delete_message(call.message.chat.id, call.message.message_id)


if __name__ == '__main__':
    bot.polling(none_stop=True)
